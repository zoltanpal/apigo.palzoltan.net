// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: sentiment.proto

package sentimentpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnalyzeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Text  string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Use your analyzer codes: "hun", "dan", "eng"
	Language      string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeRequest) Reset() {
	*x = AnalyzeRequest{}
	mi := &file_sentiment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeRequest) ProtoMessage() {}

func (x *AnalyzeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentiment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeRequest) Descriptor() ([]byte, []int) {
	return file_sentiment_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyzeRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AnalyzeRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type SentimentScore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Label         string                 `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`   // e.g., "positive" | "negative" | "neutral" | "compound"
	Score         float64                `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"` // 0..1 (or any numeric value from your analyzer)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SentimentScore) Reset() {
	*x = SentimentScore{}
	mi := &file_sentiment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentimentScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentScore) ProtoMessage() {}

func (x *SentimentScore) ProtoReflect() protoreflect.Message {
	mi := &file_sentiment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentScore.ProtoReflect.Descriptor instead.
func (*SentimentScore) Descriptor() ([]byte, []int) {
	return file_sentiment_proto_rawDescGZIP(), []int{1}
}

func (x *SentimentScore) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SentimentScore) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type AnalyzeResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Title          string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                                                                                       // original text
	SentimentKey   string                 `protobuf:"bytes,2,opt,name=sentiment_key,json=sentimentKey,proto3" json:"sentiment_key,omitempty"`                                                     // dominant label
	SentimentValue float64                `protobuf:"fixed64,3,opt,name=sentiment_value,json=sentimentValue,proto3" json:"sentiment_value,omitempty"`                                             // dominant score
	Sentiments     map[string]float64     `protobuf:"bytes,4,rep,name=sentiments,proto3" json:"sentiments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"` // all sentiment scores
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AnalyzeResponse) Reset() {
	*x = AnalyzeResponse{}
	mi := &file_sentiment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeResponse) ProtoMessage() {}

func (x *AnalyzeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentiment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeResponse) Descriptor() ([]byte, []int) {
	return file_sentiment_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyzeResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AnalyzeResponse) GetSentimentKey() string {
	if x != nil {
		return x.SentimentKey
	}
	return ""
}

func (x *AnalyzeResponse) GetSentimentValue() float64 {
	if x != nil {
		return x.SentimentValue
	}
	return 0
}

func (x *AnalyzeResponse) GetSentiments() map[string]float64 {
	if x != nil {
		return x.Sentiments
	}
	return nil
}

type BatchAnalyzeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*AnalyzeRequest      `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchAnalyzeRequest) Reset() {
	*x = BatchAnalyzeRequest{}
	mi := &file_sentiment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchAnalyzeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAnalyzeRequest) ProtoMessage() {}

func (x *BatchAnalyzeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentiment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAnalyzeRequest.ProtoReflect.Descriptor instead.
func (*BatchAnalyzeRequest) Descriptor() ([]byte, []int) {
	return file_sentiment_proto_rawDescGZIP(), []int{3}
}

func (x *BatchAnalyzeRequest) GetItems() []*AnalyzeRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

type BatchAnalyzeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*AnalyzeResponse     `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchAnalyzeResponse) Reset() {
	*x = BatchAnalyzeResponse{}
	mi := &file_sentiment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchAnalyzeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAnalyzeResponse) ProtoMessage() {}

func (x *BatchAnalyzeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentiment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAnalyzeResponse.ProtoReflect.Descriptor instead.
func (*BatchAnalyzeResponse) Descriptor() ([]byte, []int) {
	return file_sentiment_proto_rawDescGZIP(), []int{4}
}

func (x *BatchAnalyzeResponse) GetResults() []*AnalyzeResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_sentiment_proto protoreflect.FileDescriptor

const file_sentiment_proto_rawDesc = "" +
	"\n" +
	"\x0fsentiment.proto\x12\tsentiment\"@\n" +
	"\x0eAnalyzeRequest\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\"<\n" +
	"\x0eSentimentScore\x12\x14\n" +
	"\x05label\x18\x01 \x01(\tR\x05label\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x01R\x05score\"\x80\x02\n" +
	"\x0fAnalyzeResponse\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12#\n" +
	"\rsentiment_key\x18\x02 \x01(\tR\fsentimentKey\x12'\n" +
	"\x0fsentiment_value\x18\x03 \x01(\x01R\x0esentimentValue\x12J\n" +
	"\n" +
	"sentiments\x18\x04 \x03(\v2*.sentiment.AnalyzeResponse.SentimentsEntryR\n" +
	"sentiments\x1a=\n" +
	"\x0fSentimentsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"F\n" +
	"\x13BatchAnalyzeRequest\x12/\n" +
	"\x05items\x18\x01 \x03(\v2\x19.sentiment.AnalyzeRequestR\x05items\"L\n" +
	"\x14BatchAnalyzeResponse\x124\n" +
	"\aresults\x18\x01 \x03(\v2\x1a.sentiment.AnalyzeResponseR\aresults2\xa5\x01\n" +
	"\x10SentimentService\x12@\n" +
	"\aAnalyze\x12\x19.sentiment.AnalyzeRequest\x1a\x1a.sentiment.AnalyzeResponse\x12O\n" +
	"\fBatchAnalyze\x12\x1e.sentiment.BatchAnalyzeRequest\x1a\x1f.sentiment.BatchAnalyzeResponseB/Z-grpc_sentiment_client/sentimentpb;sentimentpbb\x06proto3"

var (
	file_sentiment_proto_rawDescOnce sync.Once
	file_sentiment_proto_rawDescData []byte
)

func file_sentiment_proto_rawDescGZIP() []byte {
	file_sentiment_proto_rawDescOnce.Do(func() {
		file_sentiment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sentiment_proto_rawDesc), len(file_sentiment_proto_rawDesc)))
	})
	return file_sentiment_proto_rawDescData
}

var file_sentiment_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_sentiment_proto_goTypes = []any{
	(*AnalyzeRequest)(nil),       // 0: sentiment.AnalyzeRequest
	(*SentimentScore)(nil),       // 1: sentiment.SentimentScore
	(*AnalyzeResponse)(nil),      // 2: sentiment.AnalyzeResponse
	(*BatchAnalyzeRequest)(nil),  // 3: sentiment.BatchAnalyzeRequest
	(*BatchAnalyzeResponse)(nil), // 4: sentiment.BatchAnalyzeResponse
	nil,                          // 5: sentiment.AnalyzeResponse.SentimentsEntry
}
var file_sentiment_proto_depIdxs = []int32{
	5, // 0: sentiment.AnalyzeResponse.sentiments:type_name -> sentiment.AnalyzeResponse.SentimentsEntry
	0, // 1: sentiment.BatchAnalyzeRequest.items:type_name -> sentiment.AnalyzeRequest
	2, // 2: sentiment.BatchAnalyzeResponse.results:type_name -> sentiment.AnalyzeResponse
	0, // 3: sentiment.SentimentService.Analyze:input_type -> sentiment.AnalyzeRequest
	3, // 4: sentiment.SentimentService.BatchAnalyze:input_type -> sentiment.BatchAnalyzeRequest
	2, // 5: sentiment.SentimentService.Analyze:output_type -> sentiment.AnalyzeResponse
	4, // 6: sentiment.SentimentService.BatchAnalyze:output_type -> sentiment.BatchAnalyzeResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_sentiment_proto_init() }
func file_sentiment_proto_init() {
	if File_sentiment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sentiment_proto_rawDesc), len(file_sentiment_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sentiment_proto_goTypes,
		DependencyIndexes: file_sentiment_proto_depIdxs,
		MessageInfos:      file_sentiment_proto_msgTypes,
	}.Build()
	File_sentiment_proto = out.File
	file_sentiment_proto_goTypes = nil
	file_sentiment_proto_depIdxs = nil
}
